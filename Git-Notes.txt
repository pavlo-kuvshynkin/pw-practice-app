Git guides to start working:

Before start working on your repository and creating branches you need first go to settings -> branches and create a rule for branches:
* give a branch name 'master'
* enable 'Require a pull request before merging' flag to protect your master
* enable 'Do not allow bypassing the above settings' to not allow to commit changes without a pull request even for you

1. Commands that will create your profile to recognize you when you will contribute in development
	git config --global user.email ...
	git config --global user.name "..."
	git config --global user.email/name - to check your email/name profile are active

2. Commands for creating a branch
	git branch branch-name
	git checkout branch-name - to switch to a branch where you would like to start working
	git branch - check branches to make use the one you just created is available and '*' shows a branch you are working in

3. After making changes in the code/adding new files you will see untracked changes in source control and explorer for the files you worked with, but they not yet in the version control. Here are commands to work with those untracked files:

	git status - shows all files that untracked yet
	git add . / file name - add all files to be tracked / a name of the file you want to be tracked. After that your file(s) will be staged and any changes to them will require executing 'git add .' again or click a plus button from source control panel.

	git diff - shows what has been changed in the code/file after last staging changes (will not work right after staging changes)

4. Create a commit

    git commit -m "Your message to the commit"
    git log - to check commits details

After a commit you may continue making changes to the same files and you will see changes are highlighted in VS code in the line numbers where you added changes. If you modified something it will be highlighted by blue.

5. Whenever you push your changes to the remote repository for the first time, Git will not find such repo on remote, so you will need to set the remote as upstream using the following command:

    git push --set-upstream origin branch-Name

After that, create a pull request on the GitHub site and after a merge switch to the remote master branch and make run a command 'git pull'

6. Revert. There are 2 ways to revert/reset changes. Before making a revert, we need to check current point of where we are (HEAD), go to and check on GitHub or run the following command:

	git log --oneline  -  to check all the commits and where we are at this point right now (HEAD)

- First approach. To reset changes we need choose a point of the code we had previously, copy a 'SHA' (id) of that point and paste into the following Git command:
	git reset cef0f99

After this reset you'll be at the point you choose locally and source control will show unstaged all previous commits, so we can decide to discard those commits leaving only at the point we choose or stage them again. Also, remember that on remote master branch has a latest version of the code remaining and if you discard commits on the local branch you can always sync. your local branch with latest version.
In case you need to reset changes and remove previous commits immediately you can run the following command:
	git reset cef0f99 --hard

- Second approach. To revert changes and safely push them to remote master branch we need to choose desired a point of the code, create a new branch ('revet-cef0f99' for example) and run a command:
	git revert cef0f99

After this revert you will expectedly get merge conflicts because Git see the changes that goes after the point we choose and the version we trying to recover on that commit does not like these changes, so we need to recover this manually. In VS code follow to the Resolving merge editor and compare Incoming recover changes with Current on remote master. Then complete merge, leave a commit comment and push to remote repository. Complete merge on GitHub and after that sync with remote master.

7. Merge conflict happens when a dev. A creates a local branch and pushing changes for the piece of code that dev. B is going to work on in his local branch >>> then a dev. B pushing his branch with some changes that are made to the same piece of code that dev. A pushed earlier >>> While there are two active branches that were pushed, dev. A making a PR and merging his code to the master >>> them a dev. B decides to create a PR too and when creating a PR he sees a message "can't automatically merge" and if he proceed creating a PR Git will throw a conflict that must be resolved >>> It's better to resolve it in VS code by running a command: 
      'git merge origin master' 
Then click on the 'Resolve in Merge Editor' button >>> In the editor dev. B has 3 resolution options:
- accept 'Incoming' changes going from origin master branch
- accept 'Current' changes from your local branch
- make a change that different and agreed with a dev. (e.g. accept incoming changes and modify them)
After clicking on the 'Complete merge' button, VS code creates automatic commit message and we can commit and sync those changes >>> then navigate to GitHub and safely create a PR and merge it.